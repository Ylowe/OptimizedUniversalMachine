Yang Lowe and Benny Roover
README

Collaboration: TAs (a lot)

We believe every aspect of this program is correctly implmented.

Our implementation had two small departures from our design document:
1. registers.h and register_names.h were combined into a single source
   file called registers.h
2. the registers themselves are stored as a global static array in um.c, and
   they are declared as extern in registers.h so other modules can access them.

Architecture of our design:

um.c:
um.c has functions to fetch and execute the instructions, as well as 
initialize the memory on boot. It primarily takes care of function calls 
through memory_interface.h, alu.h, and io.h. It fetches instructions from the
segmented memory defined in memory.h. The program counter also lives in um.c
Calls: memory_interface.h, alu.h, io.h, bitpack.h

io.c: 
This module is called by um.c, and interacts with the C standard input/output.
It has access to registers.h.

alu.h:
This module is called by um.c and has the method suite of logic functions.
It has access to registers.h, and it modifies the contents of registers.

memory_interface.h:
This module is called by um.c and interacts with memory.h, which is the ADT
implementation. Has the suite of memory-related functions defined in memory.h.
It has access to memory.h and registers.h, and it modifies both.

memory.h:
This module is the interface for the segmented memory ADT. It includes 
functions that directly modifiy or access the memory at given segment ids
and indices.

Rough estimate of time to execute 50 million instructions: 91.6 seconds
(caluclated by using the CPU_Timing library from the locality assignment)

***************** List of all UM tests: *****************

halt: a single halt instruction that tests basic operation of the machine.
All instructions after halt should not execute.

loadval: tests loadval instruction by loading a value and halting.

output: loads a value into a register and outputs the value.

input: inputs a single character, outputs the character. The characters should
match.

inputstring: inputs a string of characters, outputs each character one by one.
The output string should match the input string.

mapseg: Tests basic functionality of mapseg instruction - should not fail.

unmapseg: Tests basic functionality of unmap instruction by mapping a segment
and then unmapping it and mapping it again.

segstore: Tests segmented store instruction by mapping a segment and storing
some values to the segment.

segload: Tests segmented load instruction by storing some values to a segment
and then loading them back. It then outputs the values stored in these 
locations.

mapverbose: More vigorous test of map and unmap instructions. It maps and 
unmaps multiple segments.

cmov: Tests conditional move by loading two values and a zero value. Calls cmov
instruction on the given values and checks expected output. Then changes third
value to nonzero, and calls cmov instruction again.

add: Adds two small numbers together, outputs result.

mul: Multiplies two small numbers, outputs result.

addandmul: Loads a large value to a register representing a negative number
in two's complement. Adds a small number to this value, and outputs the result
(which should be a positve 2's complement number.)

div: Divides two small numbers and outputs the result.

nand: Nands two values together and outputs the result. 


***********************************************************************

hours spent analyzing the assignment: 2.5
hours spent preparing design: 9
hours spent solving problems: 7.5